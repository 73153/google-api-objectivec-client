#summary Adding the Google APIs Objective-C Client Library to a Project
#labels Featured

<wiki:toc max_depth="4" />

= Adding the Google APIs Objective-C Client Library to a Project =

The Google APIs Objective-C Client Library's core classes are provided as a built framework, suitable for inclusion in a Mac application bundle's Frameworks folder, and as a static library for iPhone applications.  Alternatively, all of the library's sources may also be compiled directly into a Mac or an iPhone application.

Service-specific classes, such as for Tasks and Books, are provided in separate folders. They are not compiled into the library or framework with the core classes, so the needed service classes should should be dragged into the application project.

== Linking to the iPhone Static Library ==

The library project includes a target for building a static library for iPhone and iPod Touch apps

To build with the static library, drag the GTL project file itself into an iPhone project to make a cross-project reference, and add the GTLTouchStaticLib target as a dependency for building the app.

Drag the static library target from under the GTL.xcodeproj cross-project reference in the application project to the application target's "Link Binary With Libraries" build phase.

(Xcode 4 projects may instead build the GTL project in a workspace rather than as a cross-project reference.)

Next, add the [http://developer.apple.com/library/mac/#qa/qa1490/_index.html ObjC link option] to the application target's build settings, along with the all_load flag:

  Other Linker Flags: `-ObjC -all_load`

The static library build creates a directory of the library's header files (in its build products directory) that should be dragged into your application project.

Also drag the folder with the class files for the services needed by your application, such as Tasks or Books, directly into your project.

Application classes using the library should include the header for each specific service, such as

`#import "GTLTasks.h"`

*_Note:_* To support the OAuth 2 sign-in classes in the library, your application will need to link to Security.framework and !SystemConfiguration.framework. 

== Linking to the Mac OS X Framework ==

To add the framework to an Xcode project, drag GTL.framework to the project's Linked Frameworks source group, then drag the GTL framework from the  Linked Frameworks group folder to the Link Binary With Library phase inside of the application target.  

Drag the folder with the class files for the services needed by your application, such as Tasks or Books, directly into your project.

For both debug and release builds of your application, add this define to your project file:

-DGTL_BUILDS_AS_FRAMEWORK=1

Application classes using the library should include the header for each specific service, such as

`#import "GTLTasks.h"`


To facilitate debugging, you may choose to include the GTL.xcodeproj project file directly in your application project as a cross-project reference.  The example applications show how to include a reference to the GTL framework project file in an Xcode project.

*_Tip_*: if Xcode's debugger is ignoring breakpoints set in the framework, turn off the [http://developer.apple.com/mac/library/documentation/DeveloperTools/Conceptual/XcodeDebugging/150-Debugging_Preferences/debugging_preferences.html "Load symbols lazily" option] in Xcode's Debugging preferences.

*_Note:_* To support the OAuth 2 sign-in classes in the library, your application will need to link to Security.framework and !SystemConfiguration.framework. 

== Compiling the Source Files Directly into a Mac or iPhone Application ==

Rather than link to the GTL framework, you can compile the GTL library sources directly into your own project. To do this, drag the GTL Sources source group from the GData Xcode project into your project's window (add by reference, not by copying the files.)  

Also drag the folder with the class files for the services needed by your application, such as Tasks or Books, directly into your project.

Application classes using the library should include the header for each specific service, such as

`#import "GTLTasks.h"`

If you compile the project's source files directly into your own project file, set this build setting:

 C Language Dialect: `C99 [-std=c99]`

Search the build settings for "c99" to find the setting. If it's not present as a build  option, and if a compile error requires c99, then set the equivalent user-defined setting:

  `GCC_C_LANGUAGE_STANDARD=c99`

For just the Debug configuration of your target, add this compiler definition to ensure that the library's debug-only code is included:

 Other C Flags: `-DDEBUG=1`

Or, if the Other C Flags setting is not available in your target's build options, set the equivalent user-defined setting:

  `OTHER_CFLAGS=-DDEBUG=1`

=== ARC Compatibility ===

When the library source files are compiled directly into a project that has ARC enabled, then ARC must be disabled specifically for the library source files.

To disable ARC for source files in Xcode 4, select the project and the target in Xcode. Under the target "Build Phases" tab, expand the Compile Sources build phase, select the library source files, then press Enter to open an edit field, and type  `-fno-objc-arc`  as the compiler flag for those files.